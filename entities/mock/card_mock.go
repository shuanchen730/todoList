// Code generated by MockGen. DO NOT EDIT.
// Source: ./entities/card.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entities "todoList/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// CheckCardExist mocks base method.
func (m *MockCardRepository) CheckCardExist(card entities.Card) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCardExist", card)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCardExist indicates an expected call of CheckCardExist.
func (mr *MockCardRepositoryMockRecorder) CheckCardExist(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCardExist", reflect.TypeOf((*MockCardRepository)(nil).CheckCardExist), card)
}

// CheckTaskExist mocks base method.
func (m *MockCardRepository) CheckTaskExist(task entities.Task) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskExist", task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTaskExist indicates an expected call of CheckTaskExist.
func (mr *MockCardRepositoryMockRecorder) CheckTaskExist(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskExist", reflect.TypeOf((*MockCardRepository)(nil).CheckTaskExist), task)
}

// CreateCard mocks base method.
func (m *MockCardRepository) CreateCard(card entities.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", card)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardRepositoryMockRecorder) CreateCard(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardRepository)(nil).CreateCard), card)
}

// CreateTask mocks base method.
func (m *MockCardRepository) CreateTask(task entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockCardRepositoryMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockCardRepository)(nil).CreateTask), task)
}

// DeleteCardAndTask mocks base method.
func (m *MockCardRepository) DeleteCardAndTask(card entities.Card, task entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardAndTask", card, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCardAndTask indicates an expected call of DeleteCardAndTask.
func (mr *MockCardRepositoryMockRecorder) DeleteCardAndTask(card, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardAndTask", reflect.TypeOf((*MockCardRepository)(nil).DeleteCardAndTask), card, task)
}

// DeleteTask mocks base method.
func (m *MockCardRepository) DeleteTask(task entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockCardRepositoryMockRecorder) DeleteTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockCardRepository)(nil).DeleteTask), task)
}

// GetAllCards mocks base method.
func (m *MockCardRepository) GetAllCards() ([]entities.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCards")
	ret0, _ := ret[0].([]entities.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCards indicates an expected call of GetAllCards.
func (mr *MockCardRepositoryMockRecorder) GetAllCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCards", reflect.TypeOf((*MockCardRepository)(nil).GetAllCards))
}

// GetSpecificCardIDTask mocks base method.
func (m *MockCardRepository) GetSpecificCardIDTask(cardID int) ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificCardIDTask", cardID)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificCardIDTask indicates an expected call of GetSpecificCardIDTask.
func (mr *MockCardRepositoryMockRecorder) GetSpecificCardIDTask(cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificCardIDTask", reflect.TypeOf((*MockCardRepository)(nil).GetSpecificCardIDTask), cardID)
}

// UpdateCard mocks base method.
func (m *MockCardRepository) UpdateCard(card entities.Card, cardID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", card, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardRepositoryMockRecorder) UpdateCard(card, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardRepository)(nil).UpdateCard), card, cardID)
}

// UpdateCardLocation mocks base method.
func (m *MockCardRepository) UpdateCardLocation(domainCard []map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCardLocation", domainCard)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCardLocation indicates an expected call of UpdateCardLocation.
func (mr *MockCardRepositoryMockRecorder) UpdateCardLocation(domainCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCardLocation", reflect.TypeOf((*MockCardRepository)(nil).UpdateCardLocation), domainCard)
}

// UpdateTask mocks base method.
func (m *MockCardRepository) UpdateTask(task entities.Task, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", task, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockCardRepositoryMockRecorder) UpdateTask(task, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockCardRepository)(nil).UpdateTask), task, taskID)
}

// UpdateTaskLocation mocks base method.
func (m *MockCardRepository) UpdateTaskLocation(domainTask []map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskLocation", domainTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskLocation indicates an expected call of UpdateTaskLocation.
func (mr *MockCardRepositoryMockRecorder) UpdateTaskLocation(domainTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskLocation", reflect.TypeOf((*MockCardRepository)(nil).UpdateTaskLocation), domainTask)
}

// MockCardUsecase is a mock of CardUsecase interface.
type MockCardUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCardUsecaseMockRecorder
}

// MockCardUsecaseMockRecorder is the mock recorder for MockCardUsecase.
type MockCardUsecaseMockRecorder struct {
	mock *MockCardUsecase
}

// NewMockCardUsecase creates a new mock instance.
func NewMockCardUsecase(ctrl *gomock.Controller) *MockCardUsecase {
	mock := &MockCardUsecase{ctrl: ctrl}
	mock.recorder = &MockCardUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardUsecase) EXPECT() *MockCardUsecaseMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardUsecase) CreateCard(newCard entities.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", newCard)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardUsecaseMockRecorder) CreateCard(newCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardUsecase)(nil).CreateCard), newCard)
}

// CreateTask mocks base method.
func (m *MockCardUsecase) CreateTask(newTask entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", newTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockCardUsecaseMockRecorder) CreateTask(newTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockCardUsecase)(nil).CreateTask), newTask)
}

// DeleteCardAndTask mocks base method.
func (m *MockCardUsecase) DeleteCardAndTask(card entities.Card, task entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardAndTask", card, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCardAndTask indicates an expected call of DeleteCardAndTask.
func (mr *MockCardUsecaseMockRecorder) DeleteCardAndTask(card, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardAndTask", reflect.TypeOf((*MockCardUsecase)(nil).DeleteCardAndTask), card, task)
}

// DeleteTask mocks base method.
func (m *MockCardUsecase) DeleteTask(task entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockCardUsecaseMockRecorder) DeleteTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockCardUsecase)(nil).DeleteTask), task)
}

// GetAllCards mocks base method.
func (m *MockCardUsecase) GetAllCards() ([]entities.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCards")
	ret0, _ := ret[0].([]entities.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCards indicates an expected call of GetAllCards.
func (mr *MockCardUsecaseMockRecorder) GetAllCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCards", reflect.TypeOf((*MockCardUsecase)(nil).GetAllCards))
}

// GetSpecificCardIDTask mocks base method.
func (m *MockCardUsecase) GetSpecificCardIDTask(cardID int) ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificCardIDTask", cardID)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificCardIDTask indicates an expected call of GetSpecificCardIDTask.
func (mr *MockCardUsecaseMockRecorder) GetSpecificCardIDTask(cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificCardIDTask", reflect.TypeOf((*MockCardUsecase)(nil).GetSpecificCardIDTask), cardID)
}

// SortCard mocks base method.
func (m *MockCardUsecase) SortCard(changeCard []entities.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortCard", changeCard)
	ret0, _ := ret[0].(error)
	return ret0
}

// SortCard indicates an expected call of SortCard.
func (mr *MockCardUsecaseMockRecorder) SortCard(changeCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortCard", reflect.TypeOf((*MockCardUsecase)(nil).SortCard), changeCard)
}

// SortTask mocks base method.
func (m *MockCardUsecase) SortTask(domainTask []entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortTask", domainTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// SortTask indicates an expected call of SortTask.
func (mr *MockCardUsecaseMockRecorder) SortTask(domainTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortTask", reflect.TypeOf((*MockCardUsecase)(nil).SortTask), domainTask)
}

// UpdateCard mocks base method.
func (m *MockCardUsecase) UpdateCard(card entities.Card, cardID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", card, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardUsecaseMockRecorder) UpdateCard(card, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardUsecase)(nil).UpdateCard), card, cardID)
}

// UpdateTask mocks base method.
func (m *MockCardUsecase) UpdateTask(task entities.Task, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", task, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockCardUsecaseMockRecorder) UpdateTask(task, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockCardUsecase)(nil).UpdateTask), task, taskID)
}
